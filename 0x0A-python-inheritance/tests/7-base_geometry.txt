
	---------- Importing the ``BaseGeometry`` class ----------
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

==================== Principal requirements checkers ====================


	---------- Check that the file is executable ----------
	>>> import os
	>>> os.access('7-base_geometry.py', os.X_OK)
	True

	---------- Check for the documentation of the module ----------
	>>> len(__import__("7-base_geometry").__doc__) > 10
	True

	---------- Check for the documentation of the function ----------
	>>> len(__import__("7-base_geometry").BaseGeometry.__doc__) > 10
	True

	---------- Check for pep8 style ----------
	>>> os.popen("7-base_geometry.py").read()
	''

	---------- Check for a newline at the end of the file ----------
	>>> os.popen("cat -e 7-base_geometry.py | tail -1").read()[-1]
	'\n'

	---------- Check for the file has a shebang ----------
	>>> os.popen("cat 7-base_geometry.py | head -1").read()
	'#!/usr/bin/python3\n'

	---------- Check that the README file exists ----------
	>>> cwd = os.getcwd()
	>>> check_readme = cwd + '/README.md'
	>>> os.path.exists(check_readme)
	True


==================== Simple test ====================


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("integer", 6)


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("integer", -6)
	Traceback (most recent call last):
		...
	ValueError: score must be greater than 0


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("maycol", 0)
	Traceback (most recent call last):
		...
	ValueError: Sergio must be greater than 0


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("higher", "School")
	Traceback (most recent call last):
		...
	TypeError: Holberton must be an integer


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
		...
	TypeError: My_list_int must be an integer


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("Tuples", (1, 2))
	Traceback (most recent call last):
		...
	TypeError: Tuples must be an integer


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("set", {1, 2, 3, 4})
	Traceback (most recent call last):
		...
	TypeError: My_set must be an integer


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("My_dict", {"maycol": 30, "paola": 35, "ale": 23})
	Traceback (most recent call last):
		...
	TypeError: My_dict must be an integer
